networks:
  backend-net:
    driver: bridge
  monitoring-net:
    driver: bridge

volumes:
  pgdata:             # PostgreSQL Database
  minio-data:         # MinIO Object-Storage
  sonarqube_data:     # SonarQube Database (embedded H2)
  sonarqube_logs:     # SonarQube Logs
  sonarqube_ext:      # SonarQube Extensions/Plugins
  redis-data:         # Redis Data
  simulation-uploads: # Simulation Service Uploads
  simulation-logs:    # Simulation Service Logs

services:

  api-gateway:
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT}:80"
    networks:
      - backend-net
      - monitoring-net
    depends_on:
      storage-service:
        condition: service_healthy
      cache-service:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker stats

  #  simulation-service:
  #    build: ./simulation-service
  #    networks:
  #      - backend-net
  #    environment:
  #      PORT: ${SIMULATION_BACKEND_PORT}
  #      HOST: 0.0.0.0
  #      UPLOAD_DIR: /app/uploads
  #      RATE_LIMIT_WINDOW: 15
  #      RATE_LIMIT_MAX: 100
  #      LOG_LEVEL: ${LOG_LEVEL:-info}
  #      PREDICTION_URL: http://prediction-service:8002
  #    volumes:
  #      - simulation-uploads:/app/uploads
  #      - simulation-logs:/app/logs
  #      - ./simulation-service/data:/app/data
  #    ports:
  #      - "8003:8003"
  #    expose:
  #      - "${SIMULATION_BACKEND_PORT}"
  #    healthcheck:
  #      test: [ "CMD", "node", "-e", "require('http').get('http://localhost:${SIMULATION_BACKEND_PORT}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 3
  #      start_period: 40s

  simulation-frontend:
    build: ./simulation-frontend
    ports:
      - "${SIMULATION_FRONTEND_PORT}:3000"
    networks:
      - backend-net
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SIMULATION_FRONTEND_PORT: ${SIMULATION_FRONTEND_PORT}
      REACT_APP_API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      REACT_APP_PREDICTION_WS_URL: ${REACT_APP_PREDICTION_WS_URL}
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
      REACT_APP_MAPTILER_API_KEY: ${MAPTILER_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker stats

    # Cache Service with monitoring
  cache-service:
    build: ./cache-service
    networks:
      - backend-net
    depends_on:
      redis:
        condition: service_healthy
    environment:
      CACHE_PORT: ${CACHE_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      OBJECT_TTL: ${OBJECT_TTL}
      STORAGE_URL: ${STORAGE_URL}
    ports:
      - "8001:${CACHE_PORT}"  # Expose for metrics
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://cache-service:${CACHE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G  # Increased for in-memory caching
        reservations:
          memory: 2G

  prediction-service:
    networks:
      - backend-net
    build:
      context: ./prediction-service
      args:
        PORT: ${PREDICTION_PORT}
    depends_on:
      storage-service:
        condition: service_healthy
      cache-service:
        condition: service_healthy
    
    environment:
      PREDICTION_PORT: ${PREDICTION_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      STORAGE_URL: ${STORAGE_URL}
      CACHE_URL: ${CACHE_URL}

  storage-service:
    build: ./storage-service
    networks:
      - backend-net
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      STORAGE_PORT: ${STORAGE_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
    expose:
      - "${STORAGE_PORT}"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    tmpfs:
      - /tmp:size=2G,noexec,nosuid
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://storage-service:${STORAGE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    networks:
      - backend-net
    volumes:
      - type: volume
        source: redis-data
        target: /data
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"  # Expose for monitoring
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G

  postgres:
    image: postgres:15-alpine
    networks:
      - backend-net
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    image: minio/minio:latest
    networks:
      - backend-net
    ports:
      - "${MINIO_PORT}:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 5s
      retries: 3
  prometheus:
    image: prom/prometheus:latest
    networks:
      - monitoring-net
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  sonarqube:
    image: sonarqube:9.9-community
    networks:
      - monitoring-net
    ports:
      - "${SONARQUBE_PORT}:9000"
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_ext:/opt/sonarqube/extensions
