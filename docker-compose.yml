networks:
  backend-net:
    driver: bridge
  monitoring-net:
    driver: bridge

volumes:
  pgdata:             # PostgreSQL Database
  minio-data:         # MinIO Object-Storage
  sonarqube_data:     # SonarQube Database (embedded H2)
  sonarqube_logs:     # SonarQube Logs
  sonarqube_ext:      # SonarQube Extensions/Plugins
  redis-data:         # Redis Data
  simulation-uploads: # Simulation Service Uploads
  simulation-logs:    # Simulation Service Logs
  prometheus-data:    # Prometheus Data

services:
  docker-stats:
    build: ./docker-stats
    networks:
      - backend-net
      - monitoring-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:3002/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      - PROMETHEUS_URL=http://prometheus:9090

  api-gateway:
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT}:80"
    networks:
      - backend-net
      - monitoring-net
    depends_on:
      storage-service:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker stats

  simulation-frontend:
    build: ./simulation-frontend
    ports:
      - "${SIMULATION_FRONTEND_PORT}:3000"
    networks:
      - backend-net
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SIMULATION_FRONTEND_PORT: ${SIMULATION_FRONTEND_PORT}
      REACT_APP_API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      REACT_APP_PREDICTION_WS_URL: ${REACT_APP_PREDICTION_WS_URL}
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
      REACT_APP_MAPTILER_API_KEY: ${MAPTILER_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker stats
    labels:
      sim.group: "frontend"

  prediction-service:
    networks:
      - backend-net
      - monitoring-net
    build:
      context: ./prediction-service
      args:
        PORT: ${PREDICTION_PORT}
    depends_on:
      storage-service:
        condition: service_healthy
    environment:
      PREDICTION_PORT: ${PREDICTION_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      STORAGE_URL: ${STORAGE_URL}
    labels:
      sim.group: "prediction-service"
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G

  storage-service:
    build: ./storage-service
    networks:
      - backend-net
      - monitoring-net
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      STORAGE_URL: ${STORAGE_URL}
      STORAGE_PORT: ${STORAGE_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      CACHE_ENABLED: ${CACHE_ENABLED}
      PREDICTION_RADIUS: ${PREDICTION_RADIUS}
      USE_DIRECTIONAL_FILTER: ${USE_DIRECTIONAL_FILTER}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      CACHE_TTL: ${CACHE_TTL}

      # Enhanced Multi-Layer Cache Configuration
      # Memory Cache
      MEMORY_CACHE_ENABLED: "true"
      MEMORY_CACHE_MAX_SIZE_MB: "2048"        # 2GB for better performance
      MEMORY_CACHE_TTL: "30m"
      MEMORY_CACHE_MAX_OBJECTS: "15000"
      MEMORY_CACHE_CLEANUP_INTERVAL: "5m"

      # FileSystem Cache
      FS_CACHE_ENABLED: "true"
      FS_CACHE_PATH: "/cache/filesystem"
      FS_CACHE_MAX_SIZE_MB: "10240"           # 10GB for extensive caching
      FS_CACHE_TTL: "4h"                      # Longer TTL for disk cache
      FS_CACHE_MAX_OBJECTS: "100000"
      FS_CACHE_CLEANUP_INTERVAL: "15m"
      FS_CACHE_IO_BUFFER_SIZE: "131072"      # 128KB for better I/O

      # Redis Cache (optimized)
      REDIS_CACHE_ENABLED: "true"
      REDIS_CACHE_TTL: "12h"                  # Longer TTL for network cache
      REDIS_CACHE_MAX_OBJECTS: "200000"
      REDIS_CHUNK_SIZE_BYTES: "2097152"      # 2MB chunks for better performance
      REDIS_PIPELINE_SIZE: "200"             # Larger pipeline
      REDIS_CONNECTION_POOL: "300"           # More connections

      # Cache Strategy (fine-tuned for Windows/Docker)
      CACHE_SMALL_FILE_THRESHOLD_MB: "8"     # 8MB → Memory
      CACHE_MEDIUM_FILE_THRESHOLD_MB: "32"   # 32MB → FileSystem
      CACHE_LARGE_FILE_THRESHOLD_MB: "100"   # 100MB → Redis
      CACHE_ENABLE_FALLBACK: "true"
      CACHE_ENABLE_PROMOTION: "true"
      CACHE_PROMOTION_DELAY: "50ms"          # Faster promotion
      CACHE_FREQUENT_ACCESS_THRESHOLD: "2"   # Lower threshold
      CACHE_ACCESS_COUNT_WINDOW: "30m"       # Shorter window

      # Performance Optimization
      PRELOAD_WORKERS: "15"                  # More workers for preloading
      PRELOAD_BATCH_SIZE: "25"               # Smaller batches for better responsiveness
      PRELOAD_TIMEOUT: "3m"
      MAX_CONCURRENT_DOWNLOADS: "150"        # Higher concurrency
      MAX_CONCURRENT_PRELOADS: "30"
      STREAM_BUFFER_SIZE: "131072"           # 128KB streaming buffer
      ENABLE_STREAM_OPTIMIZATION: "true"

      # Metrics and Monitoring
      METRICS_ENABLED: "true"
      METRICS_INTERVAL: "15s"                # More frequent metrics
      DETAILED_METRICS: "true"
      HEALTH_CHECK_INTERVAL: "20s"
      HEALTH_CHECK_TIMEOUT: "3s"
    expose:
      - "${STORAGE_PORT}"
    deploy:
      resources:
        limits:
          memory: 10G
        reservations:
          memory: 2G
    tmpfs:
      - /tmp:size=2G,noexec,nosuid
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://storage-service:${STORAGE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      sim.group: "storage-service"  # Label for metric filtering

  redis:
    image: redis:7-alpine
    networks:
      - backend-net
      - monitoring-net
    volumes:
      - type: volume
        source: redis-data
        target: /data
    command: >
      redis-server
      --io-threads 6
      --io-threads-do-reads yes
      --maxmemory 6gb
      --appendonly no       
      --save ""
      --tcp-keepalive 300
    ports:
      - "6379:6379"  # Expose for monitoring
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G
    labels:
      sim.group: "redis"  # Label for metric filtering

  postgres:
    image: postgres:15-alpine
    networks:
      - backend-net
      - monitoring-net
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      sim.group: "database"

  minio:
    image: minio/minio:latest
    networks:
      - backend-net
      - monitoring-net
    ports:
      - "${MINIO_PORT}:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      sim.group: "minio"  # Label for metric filtering

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    networks:
      - monitoring-net
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=sim.group'
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    networks:
      - monitoring-net
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
